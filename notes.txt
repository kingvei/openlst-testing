Assembly Notes:
 - CC1110 chip is often fails to solder properly, so it is typically necessary to go back over with a fine solder tip and a fine solder (.4mm).

Software Notes:
 - It is possible to bypass the vagrant setup (though I have not had luck getting it working). (the guide at least specifies the possibility).
	 - Currently the a simple screen is capable of reading the git sha update (i.e transmit git sha on start up, watchdog timer resets after 1 second, repeat).
	 - However, their radio_terminal does not appear to be working.
	 - Trying to use "radio_mux /dev/ttyUSB0" doesn't appear to fix the problem either (I have been running all utilies though with sudo privileges as it is easier to get running)

Vagrant Notes:
 - It is entirely possible that pip will be broken in your vagrant distribution.
	- This is entirely due to the fact that the OpenLST repo using python2 instead of 3 which as of late pip has dropped all support for python2.
 - pip install --upgrade "pip < 21.0"
	- This command is useful to update to the latest pip version that still supports python2.
	- Another thing that might be needed is uninstall pip2 via your package manager (probably aptitude) and delete a .local folder for pip than reinstall using your package manager and then use the above command to update it. This fixed my problem.

I bypassed the vagrant setup for now:
 - for fixing radio_mux, I just made my own script that doesn't utilize a lot of znq stuff. Not worth the hassle for the first test

issuing commands:
 - issue commands, use the radio_terminal (give it the proper uart, and hardware id), and start by using lst as the base.
 "lst (command)". If you hit tab while having lst you should be given options for commands

Bypassing most of the muxing of UART ports:
 - More or less zynq is used to multiplex the two UART ports.
 - However, it appears to not always work exactly correctly due to various udev stuff.
 - To bypass this made a zynq.sh script in the tools folder for openlst that just runs the background radio_mux and specifies specifically the UART1 only. This works fine for initial testing but should be altered later on.
 - Note only tested on Arch Linux, so this may not work for all distributions 


Adding Custom Commands:
 - So the process for adding custom commands is somewhat clumsy (at least if you want them accessible via the radio_terminal).
 - There are more or less 2 locations that need to be edited to add a custom command (depending on the complexity).
	- the python translator.py 
		- Added your hexcode that corresponds to your command
		- Add the option so that "lst (insert command)" works.
	- /open-lst/radio/radio_commands.h
		- Added the hexcode for your command
	- /open-lst/radio/commands.c
		- Actually flush out the command.

 - You can setup the custom commands multiple ways so that they can be easily disabled with a macro but for now I just add my commands to the main switch statement in commands.c 
